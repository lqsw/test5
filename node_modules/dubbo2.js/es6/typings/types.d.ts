/// <reference types="node" />
import { Setting } from './setting';
export interface IObservable<T> {
    subscribe(subscriber: T): any;
}
export declare type TDecodeBuffSubscriber = (data: Buffer) => void;
export interface ITrace {
    type: 'INFO' | 'ERR';
    msg: string | Error;
    pid?: string;
    host?: string;
    time?: string;
}
export interface IDubboSubscriber {
    onTrace: (msg: ITrace) => void;
}
export interface IRegistrySubscriber {
    onData: Function;
    onError: Function;
}
export interface ISocketSubscriber {
    onConnect: Function;
    onData: Function;
    onClose: Function;
}
export interface ISocketAgentProps {
    agentHostList: Set<string>;
}
export interface IDirectlyDubboProps {
    dubboAddress: string;
    dubboVersion: string;
    dubboInvokeTimeout?: number;
}
export interface IInvokeParam {
    dubboInterface: string;
    methods: {
        [methodName: string]: Function;
    };
    group?: string;
    version?: string;
    timeout?: number;
}
export interface IDubboProps {
    application: {
        name: string;
    };
    register: string;
    isSupportedDubbox?: boolean;
    dubboInvokeTimeout?: number;
    dubboSocketPool?: number;
    zkRoot?: string;
    service: Object;
    dubboSetting: Setting;
}
export declare type TDubboService<T> = {
    [k in keyof T]: T[k] extends ((dubbo: any) => infer R) ? R : any;
};
export interface IDubboResult<T> {
    err: Error;
    res: T;
}
export declare type TDubboCallResult<T> = Promise<IDubboResult<T>>;
export interface IDubboProvider {
    dubboInterface: string;
    version?: string;
    timeout?: number;
    group?: string;
    methods: {
        [methodName: string]: Function;
    };
}
export interface IZkClientProps {
    application?: {
        name: string;
    };
    zkRoot?: string;
    register: string;
    interfaces: Array<string>;
    dubboSetting: Setting;
}
export interface IProviderProps {
    host: string;
    port: number;
    path: string;
    dubboVersion: string;
    version: string;
    group: string;
    timeout: number;
}
export declare type TRequestId = number;
export interface IDubboResponse<T> {
    requestId: number;
    err: Error | null;
    res: T | null;
    attachments: Object;
}
export interface IHessianType {
    $class: string;
    $: any;
}
export declare type Middleware<T> = (context: T, next: () => Promise<any>) => any;
export interface IContextRequestParam {
    requestId: number;
    dubboVersion: string;
    dubboInterface: string;
    path: string;
    methodName: string;
    methodArgs: Array<IHessianType>;
    version: string;
    timeout: number;
    group: string;
}
export interface IQueryObj {
    application: string;
    dubbo: string;
    interface: string;
    path: string;
    methods: string;
    version: string;
    group: string;
}
export declare type TQueueObserver = Function;
export interface ICreateConsumerParam {
    name: string;
    dubboInterface: string;
}

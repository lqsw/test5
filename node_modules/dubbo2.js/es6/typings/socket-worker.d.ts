import Context from './context';
import { SOCKET_STATUS } from './socket-status';
import { IObservable, ISocketSubscriber } from './types';
/**
 * 具体处理tcp底层通信的模块
 * 1 负责socket的创建和通信
 * 2.负责dubbo的序列化和反序列化
 * 3.socket断开自动重试
 */
export default class SocketWorker implements IObservable<ISocketSubscriber> {
    private constructor();
    readonly pid: number;
    readonly host: string;
    readonly port: number;
    private _retry;
    private _heartBeatTimer;
    private _socket;
    private _status;
    private _decodeBuff;
    private _subscriber;
    /**
     * static factory method
     * @param url(host:port)
     */
    static from(url: string): SocketWorker;
    /**
     * send data to dubbo service
     * @param ctx dubbo context
     */
    write(ctx: Context): void;
    readonly status: SOCKET_STATUS;
    /**
     * current status is whether avaliable or not
     */
    readonly isAvaliable: boolean;
    /**
     * current status whether retry or not
     */
    readonly isRetry: boolean;
    /**
     * reset retry number
     */
    resetRetry(): void;
    /**
     * subscribe the socket worker events
     * @param subscriber
     */
    subscribe(subscriber: ISocketSubscriber): this;
    private _initSocket;
    private _onConnected;
    private _onData;
    private _onError;
    private _onClose;
    private _onSubscribeDecodeBuff;
}

/// <reference types="node" />
import { IContextRequestParam, IDubboResult, IHessianType } from './types';
export default class Context<T = any> {
    private constructor();
    /**
     * 当前dubbo请求的参数
     */
    private readonly _request;
    /**
     * 当前dubbo返回的结果
     */
    private _body;
    /**
     * dubbo设置的application
     */
    private readonly _application;
    /**
     * 是否支持dubbox,不希望通过版本2.8x来判断，不够语义化
     */
    private _isSupportedDubbox;
    /**
     * 当前promise的resolve
     */
    private _resolve;
    /**
     * 当前promise的reject
     */
    private _reject;
    /**
     * 当前上下文被host调用
     */
    private _invokeHost;
    /**
     * 当前上下文调用的port
     */
    private _invokePort;
    /**
     * 当前超时的上下文
     */
    private _timeoutId;
    /**
     * 当前上下文唯一的id，方便全链路日志跟踪
     */
    private _uuid;
    /**
     * socket-worker的pid，标记被socket-worker调度
     */
    private _pid;
    /**
     * 扩展attachments,支持自定义一些属性可以放在dubbo的encoder底层协议的attachment字段中
     */
    private _attachments;
    /**
     * dubbo2.6.3 增加了 provider => consumer的attachments的能力
     * https://github.com/apache/incubator-dubbo/issues/889
     */
    private _providerAttachments;
    static create<T = any>(): Context<T>;
    readonly isMethodArgsHessianType: boolean;
    readonly request: IContextRequestParam;
    body: IDubboResult<any>;
    requestId: number;
    methodName: string;
    methodArgs: Array<IHessianType>;
    dubboInterface: string;
    dubboVersion: string;
    version: string;
    /**
     * 设置dubbo超时时间
     */
    timeout: number;
    group: string;
    path: string;
    application: {
        name: string;
    };
    resolve: Function;
    reject: Function;
    invokeHost: string;
    invokePort: number;
    timeoutId: NodeJS.Timer;
    cleanTimeout(): void;
    uuid: string;
    pid: number;
    /**
     * 当前上下文是不是么有被处理被调度
     */
    readonly isNotScheduled: boolean;
    isSupportedDubbox: boolean;
    /**
     * 设置当前的attachments
     * @param key
     * @param value
     */
    /**
    * 获取当前的attachments
    */
    attachments: Object;
    /**
     * 设置provider传递过来的attachments
     * @since dubbo2.6.3
     */
    /**
    * 设置provider传递过来的attachments
    * @since dubbo2.6.3
    */
    providerAttachments: Object;
    private static _checkHessianParam;
}

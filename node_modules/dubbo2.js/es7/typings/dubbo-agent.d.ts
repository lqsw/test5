import SocketWorker from './socket-worker';
import { IObservable, ISocketSubscriber } from './types';
import { TAgentAddr } from './zookeeper';
/**
 * 机器agent和socket-worker的管理容器
 * Agent可以理解为一台dubbo service的负载
 */
export default class DubboAgent implements IObservable<ISocketSubscriber> {
    constructor();
    private _subscriber;
    private readonly _serverAgentMap;
    /**
     * static factor method
     * @param agentAddrList 负载地址列表
     */
    from: (agentAddrs: Set<string>) => this;
    /**
     * 获取可用负载对应的socketWorker
     * @param agentAddrList
     */
    getAvailableSocketWorker(agentAddrList?: Array<TAgentAddr>): SocketWorker;
    /**
     * remove close socket-worker from server agent
     */
    private _clearCloseWorker;
    subscribe(subscriber: ISocketSubscriber): this;
    /**
     * 查询一组负载可用的agent
     * @param agentAddrList
     */
    private _getAvailableSocketAgents;
}

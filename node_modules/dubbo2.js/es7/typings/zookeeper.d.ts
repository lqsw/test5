import Context from './context';
import DubboUrl from './dubbo-url';
import { IObservable, IRegistrySubscriber, IZkClientProps } from './types';
export declare type TAgentAddr = string;
export declare type TDubboInterface = string;
export declare class ZkRegistry implements IObservable<IRegistrySubscriber> {
    private constructor();
    private _agentAddrSet;
    private _client;
    private _subscriber;
    private readonly _props;
    private readonly _dubboServiceUrlMap;
    static from(props: IZkClientProps): ZkRegistry;
    /**
     * 根据dubbo调用上下文interface, group, version等，获取负载列表
     * @param ctx dubbo调用上下文
     */
    getAgentAddrList(ctx: Context): string[];
    /**
     * 根据dubbo调用上下文获取服务提供者的信息
     * @param ctx
     */
    getDubboServiceProp(ctx: Context): DubboUrl;
    /**
     * 订阅者
     * @param subscriber
     */
    subscribe(subscriber: IRegistrySubscriber): this;
    private _init;
    /**
     * get current all agent address
     */
    readonly allAgentAddrSet: Set<string>;
    /**
     * 获取所有的负载列表，通过agentAddrMap聚合出来
     * 这样有点Reactive的感觉，不需要考虑当中增加删除的动作
     */
    private readonly _allAgentAddrSet;
    /**
     * 获取所有的provider列表
     * @param {string} dubboServicePath
     * @param dubboInterface
     * @returns {Promise<Array<string>>}
     * @private
     */
    private _getDubboServiceUrls;
    /**
     * connect zookeeper
     */
    private _connect;
    private _watch;
    private _getChildren;
    /**
     * com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry
     */
    private _createConsumer;
    private _createRootConsumer;
    private _create;
    private _exists;
}

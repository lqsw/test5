"use strict";
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const hessian_js_1 = __importDefault(require("hessian.js"));
const byte_1 = require("./byte");
const err_1 = require("./err");
const log = debug_1.default('dubbo:hessian:DecoderV2');
//dubbo response header length
const HEADER_LENGTH = 16;
//com.alibaba.dubbo.remoting.exchange.Response
var DUBBO_RESPONSE_STATUS;
(function (DUBBO_RESPONSE_STATUS) {
    DUBBO_RESPONSE_STATUS[DUBBO_RESPONSE_STATUS["OK"] = 20] = "OK";
    DUBBO_RESPONSE_STATUS[DUBBO_RESPONSE_STATUS["CLIENT_TIMEOUT"] = 30] = "CLIENT_TIMEOUT";
    DUBBO_RESPONSE_STATUS[DUBBO_RESPONSE_STATUS["SERVER_TIMEOUT"] = 31] = "SERVER_TIMEOUT";
    DUBBO_RESPONSE_STATUS[DUBBO_RESPONSE_STATUS["BAD_REQUEST"] = 40] = "BAD_REQUEST";
    DUBBO_RESPONSE_STATUS[DUBBO_RESPONSE_STATUS["BAD_RESPONSE"] = 50] = "BAD_RESPONSE";
    DUBBO_RESPONSE_STATUS[DUBBO_RESPONSE_STATUS["SERVICE_NOT_FOUND"] = 60] = "SERVICE_NOT_FOUND";
    DUBBO_RESPONSE_STATUS[DUBBO_RESPONSE_STATUS["SERVICE_ERROR"] = 70] = "SERVICE_ERROR";
    DUBBO_RESPONSE_STATUS[DUBBO_RESPONSE_STATUS["SERVER_ERROR"] = 80] = "SERVER_ERROR";
    DUBBO_RESPONSE_STATUS[DUBBO_RESPONSE_STATUS["CLIENT_ERROR"] = 90] = "CLIENT_ERROR";
})(DUBBO_RESPONSE_STATUS || (DUBBO_RESPONSE_STATUS = {}));
//body response status
var DUBBO_RESPONSE_BODY_FLAG;
(function (DUBBO_RESPONSE_BODY_FLAG) {
    DUBBO_RESPONSE_BODY_FLAG[DUBBO_RESPONSE_BODY_FLAG["RESPONSE_WITH_EXCEPTION"] = 0] = "RESPONSE_WITH_EXCEPTION";
    DUBBO_RESPONSE_BODY_FLAG[DUBBO_RESPONSE_BODY_FLAG["RESPONSE_VALUE"] = 1] = "RESPONSE_VALUE";
    DUBBO_RESPONSE_BODY_FLAG[DUBBO_RESPONSE_BODY_FLAG["RESPONSE_NULL_VALUE"] = 2] = "RESPONSE_NULL_VALUE";
    //@since dubbo2.6.3
    DUBBO_RESPONSE_BODY_FLAG[DUBBO_RESPONSE_BODY_FLAG["RESPONSE_WITH_EXCEPTION_WITH_ATTACHMENTS"] = 3] = "RESPONSE_WITH_EXCEPTION_WITH_ATTACHMENTS";
    DUBBO_RESPONSE_BODY_FLAG[DUBBO_RESPONSE_BODY_FLAG["RESPONSE_VALUE_WITH_ATTACHMENTS"] = 4] = "RESPONSE_VALUE_WITH_ATTACHMENTS";
    DUBBO_RESPONSE_BODY_FLAG[DUBBO_RESPONSE_BODY_FLAG["RESPONSE_NULL_VALUE_WITH_ATTACHMENTS"] = 5] = "RESPONSE_NULL_VALUE_WITH_ATTACHMENTS";
})(DUBBO_RESPONSE_BODY_FLAG || (DUBBO_RESPONSE_BODY_FLAG = {}));
//com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.encodeResponse/decode
function decode(bytes) {
    let res = null;
    let err = null;
    let attachments = {};
    // set request and serialization flag.
    //字节位置[4-11] 8 bytes
    const requestIdBuff = bytes.slice(4, 12);
    const requestId = byte_1.fromBytes8(requestIdBuff);
    log(`decode parse requestId: ${requestId}`);
    // const typeId = bytes[2];
    // get response status.
    const status = bytes[3];
    log(`parse response status: ${status}, DUBBO_RESPONSE_STATUS: ${DUBBO_RESPONSE_STATUS[DUBBO_RESPONSE_STATUS.OK]}`);
    if (status != DUBBO_RESPONSE_STATUS.OK) {
        return {
            err: new err_1.DubboDecodeError(bytes.slice(HEADER_LENGTH).toString()),
            res: null,
            attachments,
            requestId,
        };
    }
    //com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcResult
    const body = new hessian_js_1.default.DecoderV2(bytes.slice(HEADER_LENGTH));
    const flag = body.readInt();
    log(`parse dubbo response body flag: ${flag}, DUBBO_RESPONSE_BODY_FLAG: ${DUBBO_RESPONSE_BODY_FLAG[flag]}`);
    switch (flag) {
        case DUBBO_RESPONSE_BODY_FLAG.RESPONSE_VALUE:
            err = null;
            res = body.read();
            attachments = {};
            break;
        case DUBBO_RESPONSE_BODY_FLAG.RESPONSE_NULL_VALUE:
            err = null;
            res = null;
            attachments = {};
            break;
        case DUBBO_RESPONSE_BODY_FLAG.RESPONSE_WITH_EXCEPTION:
            const exception = body.read();
            err =
                exception instanceof Error
                    ? exception
                    : new err_1.DubboDecodeError(exception);
            res = null;
            attachments = {};
            break;
        case DUBBO_RESPONSE_BODY_FLAG.RESPONSE_NULL_VALUE_WITH_ATTACHMENTS:
            err = null;
            res = null;
            attachments = body.read();
            break;
        case DUBBO_RESPONSE_BODY_FLAG.RESPONSE_VALUE_WITH_ATTACHMENTS:
            err = null;
            res = body.read();
            attachments = body.read();
            break;
        case DUBBO_RESPONSE_BODY_FLAG.RESPONSE_WITH_EXCEPTION_WITH_ATTACHMENTS:
            const exp = body.read();
            err = exp instanceof Error ? exp : new err_1.DubboDecodeError(exp);
            res = null;
            attachments = body.read();
            break;
        default:
            err = new err_1.DubboDecodeError(`Unknown result flag, expect '0/1/2/3/4/5', get  ${flag})`);
            res = null;
    }
    return {
        requestId,
        err,
        res,
        attachments,
    };
}
exports.decode = decode;
